Студент ПИ, пораскинув мозгами, понял, что устал прокрастинировать.
После неудачного собеседования на завод, на котором он, после семестрового курса по алгоритмам и структурам данных, не смог перевернуть связный список за линию, он решил попробовать для себя новую нишу.
А именно –– пойти в опенсорс. 
Долго рассматривая свободные проекты на https://summerofcode.withgoogle.com/ и выбирая между тем, куда он хочет контрибьютить – в Swift или же всё-таки Linux, понял, что до сих пор не знает Git. Он решил пройти туториал по гиту на ютубе как можно скорее. 
Студент начал заучивать основные git команды, но он слишком быстро их набирал и иногда пропускал, добавлял лишние или менял местами символы. У него могло получиться git stts вместо git status.
Про алиасы, он конечно же, не знал...
Внезапно(!) его осенила идея, что zsh, которым он пользуется, опенсорсный. Да и фичи, которая находит и исправляет опечатки, у них нет. Так он и выбрал проект, в который будет контрибьютить на GSoC.
Написав proposal с описанием проекта и перспективы его внедрения в текущую экосистему zsh, он приступил к его выполнению.
Среди обязательных пунктов в этом proposal были:
наличие списка имеющихся команд
максимально возможное количество опечаток пользователя при наборе команды. Этот параметр можно настроить так, чтобы исправлять абсолютно все опечатки в командах.
На первом этапе студент решил просто подсчитать количество схожих строк, а потом выводить подсказки или выполнять автозамену. Помогите студенту выполнить первый этап проекта, дальше он и сам справится :)

Формат ввода
В первой строке - неотрицательное целое число N: количество используемых команд
В следующих N строках - команды, по одной команде в каждой строке. Они могут состоять только из символов: ['A'-'Z'; 'a'-'z'; '+'; '-'; '_'; '|'; '='; '/']
В следующей строке - неотрицательное целое число D: максимально возможное количество опечаток пользователя в каждой строке, которую будет обрабатывать утилита пишника
Далее неотрицательное целое число K: количество запросов (команд, введенных пользователем), которые утилита должна обработать
Затем K строк, каждая из которых может состоять только из символов: ['A'-'Z'; 'a'-'z'; '+'; '-'; '_'; '|'; '='; '/']
Ограничения:
Длина любой строки: до 2 * 1000
Количество команд(N): до 10000
Количество запросов(K): до 100000
Максимальное количество опечаток (D): до 10

Формат вывода
На каждый запрос, который вводится пользователем, нужно вывести число – количествово возможных команд, которые подходят пользователю с учетом числа D – количества возможных ошибок.